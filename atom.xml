<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帅气的狗头</title>
  <icon>https://www.gravatar.com/avatar/03bda83e263545c3eb7af2e98e24701d</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wddog.cn/"/>
  <updated>2018-06-19T14:02:47.481Z</updated>
  <id>http://blog.wddog.cn/</id>
  
  <author>
    <name>xiaoxie</name>
    <email>15270841285@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php设计模式 Bridge (桥接模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20bridge%20(%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式 bridge (桥接模式)/</id>
    <published>2018-06-19T14:01:50.629Z</published>
    <updated>2018-06-19T14:02:47.481Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家介绍的是php设计模式中的 Bridge (桥接模式)示例代码，感兴趣的同学参考研究下。</p><p>将抽象部份与它实现部分分离,使用它们都可以有独立的变化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 桥接模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 将抽象部份与它实现部分分离,使用它们都可以有独立的变化 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Implementor</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"ConcreteImplementorA Operation&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"ConcreteImplementorB Operation&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">protected</span> $_implementor = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setImplementor</span><span class="params">($implementor)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_implementor = $implementor; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_implementor-&gt;operation(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// </span></span><br><span class="line">$objRAbstraction = <span class="keyword">new</span> RefinedAbstraction(); </span><br><span class="line">$objRAbstraction-&gt;setImplementor(<span class="keyword">new</span> ConcreteImplementorB()); </span><br><span class="line">$objRAbstraction-&gt;operation(); </span><br><span class="line">$objRAbstraction-&gt;setImplementor(<span class="keyword">new</span> ConcreteImplementorA()); </span><br><span class="line">$objRAbstraction-&gt;operation(); </span><br><span class="line">$objEAbstraction = <span class="keyword">new</span> ExampleAbstraction(); </span><br><span class="line">$objEAbstraction-&gt;setImplementor(<span class="keyword">new</span> ConcreteImplementorB()); </span><br><span class="line">$objEAbstraction-&gt;operation();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式 Chain Of Responsibility (职责链模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20Chain%20Of%20Responsibility%20(%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式 Chain Of Responsibility (职责链模式)/</id>
    <published>2018-06-19T13:56:37.479Z</published>
    <updated>2018-06-19T14:00:06.136Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家介绍的是php设计模式中的 Chain Of Responsibility (职责链模式)示例代码，感兴趣的同学参考下。</p><p>为解除请求的发送者和接收者之间的耦合,而使用多个对象都用机会处理这个请求,将这些对象连成一条链,并沿着这条链传递该请求,直到<br>有一个对象处理它</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 职责链模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 为解除请求的发送者和接收者之间的耦合,而使用多个对象都用机会处理这个请求,将这些对象连成一条链,并沿着这条链传递该请求,</span></span><br><span class="line"><span class="comment">直到有一个对象处理它 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">protected</span> $_handler = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSuccessor</span><span class="params">($handler)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_handler = $handler; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span><span class="params">($request)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerZero</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span><span class="params">($request)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>($request == <span class="number">0</span>) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"0&lt;br/&gt;"</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_handler-&gt;handleRequest($request); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerOdd</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span><span class="params">($request)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>($request % <span class="number">2</span>) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">echo</span> $request.<span class="string">" is odd&lt;br/&gt;"</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_handler-&gt;handleRequest($request); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerEven</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span><span class="params">($request)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(!($request % <span class="number">2</span>)) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">echo</span> $request.<span class="string">" is even&lt;br/&gt;"</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_handler-&gt;handleRequest($request); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 实例一下 </span></span><br><span class="line">$objZeroHander = <span class="keyword">new</span> ConcreteHandlerZero(); </span><br><span class="line">$objEvenHander = <span class="keyword">new</span> ConcreteHandlerEven(); </span><br><span class="line">$objOddHander = <span class="keyword">new</span> ConcreteHandlerOdd(); </span><br><span class="line">$objZeroHander-&gt;setSuccessor($objEvenHander); </span><br><span class="line">$objEvenHander-&gt;setSuccessor($objOddHander); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>) <span class="keyword">as</span> $row) </span><br><span class="line">&#123; </span><br><span class="line">$objZeroHander-&gt;handleRequest($row); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式 FlyWeight (享元模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-flyWeight%20(%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-flyWeight (享元模式)/</id>
    <published>2018-06-19T13:53:45.110Z</published>
    <updated>2018-06-19T13:56:32.001Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家介绍的是php设计模式中的 FlyWeight (享元模式)示例代码，感兴趣的同学参考学习下。</p><p>享元模式英文称为“Flyweight Pattern”，我非常感谢将Flyweight Pattern翻译成享元模式的那位强人，因为这个词将这个模式使用的方式明白得表示了出来；如果翻译成为羽量级模式或者蝇量级模式等等，虽然可以含蓄的表现出使用此模式达到的目的，但是还是没有抓住此模式的关键。</p><p>享元模式的定义为：采用一个共享来避免大量拥有相同内容对象的开销。这种开销中最常见、直观的就是内存的损耗。享元模式以共享的方式高效的支持大量的细粒度对象。</p><p>在名字和定义中都体现出了共享这一个核心概念，那么怎么来实现共享呢？要知道每个事物都是不同的，但是又有一定的共性，如果只有完全相同的事物才能共享，那么享元模式可以说就是不可行的；因此我们应该尽量将事物的共性共享，而又保留它的个性。为了做到这点，享元模式中区分了内蕴状态和外蕴状态。内蕴状态就是共性，外蕴状态就是个性了。</p><p>注：共享的对象必须是不可变的，不然一变则全变（如果有这种需求除外）。</p><p>内蕴状态存储在享元内部，不会随环境的改变而有所不同，是可以共享的；外蕴状态是不可以共享的，它随环境的改变而改变的，因此外蕴状态是由客户端来保持（因为环境的变化是由客户端引起的）。在每个具体的环境下，客户端将外蕴状态传递给享元，从而创建不同的对象出来。</p><p>先看看下面程序，大概了解下享元模式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 享元模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 运用享元技术有效的支持大量细粒度的对象 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CD</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_title = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">private</span> $_artist = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span><span class="params">($title)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_title = $title; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_title; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setArtist</span><span class="params">($artist)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_artist = $artist; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArtist</span><span class="params">($artist)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_artist; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Artist</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_name; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"construct "</span>.$name.<span class="string">"&lt;br/&gt;"</span>; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_name = $name; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_name; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArtistFactory</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_artists = <span class="keyword">array</span>(); </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArtist</span><span class="params">($name)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_artists[$name])) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_artists[$name]; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">$objArtist = <span class="keyword">new</span> Artist($name); </span><br><span class="line"><span class="keyword">$this</span>-&gt;_artists[$name] = $objArtist; </span><br><span class="line"><span class="keyword">return</span> $objArtist; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">$objArtistFactory = <span class="keyword">new</span> ArtistFactory(); </span><br><span class="line">$objCD1 = <span class="keyword">new</span> CD(); </span><br><span class="line">$objCD1-&gt;setTitle(<span class="string">"title1"</span>); </span><br><span class="line">$objCD1-&gt;setArtist($objArtistFactory-&gt;getArtist(<span class="string">'artist1'</span>)); </span><br><span class="line">$objCD2 = <span class="keyword">new</span> CD(); </span><br><span class="line">$objCD2-&gt;setTitle(<span class="string">"title2"</span>); </span><br><span class="line">$objCD2-&gt;setArtist($objArtistFactory-&gt;getArtist(<span class="string">'artist2'</span>)); </span><br><span class="line">$objCD3 = <span class="keyword">new</span> CD(); </span><br><span class="line">$objCD3-&gt;setTitle(<span class="string">"title3"</span>); </span><br><span class="line">$objCD3-&gt;setArtist($objArtistFactory-&gt;getArtist(<span class="string">'artist1'</span>));</span><br></pre></td></tr></table></figure><p>享元模式的精要有三点：</p><p>被系统大量使用的细粒度对象，粒度要有多细，量要有多大，看看jdk中使用的享元模式就知道了，jdk中，Integer,Character,String等都使用了享元模式，他们都是最基础的数据类型，不可谓不细，他们频繁的参与运算，不可谓不大量。<br>划分对象的内蕴属性/状态和外蕴属性/状态;所谓内蕴状态，就是存在对象的内部，不会随着环境变化的状态， 有一个网友说的很好，就是无区别的状态， 即拿掉外蕴属性之后同一类对象没有区别对象的内蕴状态就是对象的元神，只要元神元神无区别，那么对象也就无区别，同时也只有这些无区别的元神可以被共享，我想这也是Flyweight被翻译成享元的原因。外蕴状态就是由客户端指定，会随着环境变化的状态; 对于Integer来说， 他的内蕴属性其实就是他的value(当然它也没有外蕴属性);<br>用一个工厂控制享元的创造;因为享元对象不能被客户端随意创造， 否则就没有意义了。工厂通常提供缓存机制保存已经创造的享元。<br>面向对象虽然很好地解决了抽象性的问题，但是对于一个实际运行的软件系统，我们还需要考虑面向对象的代价问题，享元模式解决的就是面向对象的代价问题。享元模式采用对象共享的做法来降低系统中对象的个数，从而降低细粒度对象给系统带来的内存压力。</p><p>享元模式在一般的项目开发中并不常用，而是常常应用于系统底层的开发，以便解决系统的性能问题。Java和.Net中的String类型就是使用了享元模式。如果在Java或者.NET中已经创建了一个字符串对象s1，那么下次再创建相同的字符串s2的时候，系统只是把s2的引用指向s1所引用的具体对象，这就实现了相同字符串在内存中的共享。如果每次执行s1=“abc”操作的时候，都创建一个新的字符串对象的话，那么内存的开销会很大。</p>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Mediator (中介者模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-mediator%20(%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-mediator (中介者模式)/</id>
    <published>2018-06-19T13:52:25.362Z</published>
    <updated>2018-06-19T13:53:26.248Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家介绍的是php设计模式 中的Mediator (中介者模式)示例代码，感兴趣的同学参考学习下。</p><p>用一个中介对象来封装一系列的对象交互,使各对象不需要显式地相互引用从而使其耦合松散,而且可以独立地改变它们之间的交互</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 中介者模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 用一个中介对象来封装一系列的对象交互,使各对象不需要显式地相互引用从而使其耦合松散,而且可以独立地改变它们之间的交互 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($message,$colleague)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_mediator = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Colleague</span><span class="params">($mediator)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_mediator = $mediator; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($message)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_mediator-&gt;send($message,<span class="keyword">$this</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">($message)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_colleague1 = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">private</span> $_colleague2 = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($message,$colleague)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>($colleague == <span class="keyword">$this</span>-&gt;_colleague1) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_colleague1-&gt;notify($message); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_colleague2-&gt;notify($message); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($colleague1,$colleague2)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_colleague1 = $colleague1; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_colleague2 = $colleague2; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Colleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">($message)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Colleague1 Message is :"</span>.$message.<span class="string">"&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Colleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">($message)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Colleague2 Message is :"</span>.$message.<span class="string">"&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// </span></span><br><span class="line">$objMediator = <span class="keyword">new</span> ConcreteMediator(); </span><br><span class="line">$objC1 = <span class="keyword">new</span> Colleague1($objMediator); </span><br><span class="line">$objC2 = <span class="keyword">new</span> Colleague2($objMediator); </span><br><span class="line">$objMediator-&gt;set($objC1,$objC2); </span><br><span class="line">$objC1-&gt;send(<span class="string">"to c2 from c1"</span>); </span><br><span class="line">$objC2-&gt;send(<span class="string">"to c1 from c2"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Prototype原型模式</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-prototype%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-prototype原型模式/</id>
    <published>2018-06-19T13:47:45.220Z</published>
    <updated>2018-06-19T13:50:23.832Z</updated>
    
    <content type="html"><![CDATA[<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br>Prototype原型模式是一种创建型设计模式，Prototype模式允许一个对象再创建另外一个可定制的对象，根本无需知道任何如何创建的细节,工作原理是:通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建。</p><p>用原型实例指定创建对象的种类.并且通过拷贝这个原型来创建新的对象</p><p>代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 原型模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 用原型实例指定创建对象的种类.并且通过拷贝这个原型来创建新的对象 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_id = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($id)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_id = $id; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getID</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_id; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span> // <span class="title">magic</span> <span class="title">function</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_id += <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClone</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">clone</span> <span class="keyword">$this</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// </span></span><br><span class="line">$objPrototype = <span class="keyword">new</span> ConcretePrototype(<span class="number">0</span>); </span><br><span class="line">$objPrototype1 = <span class="keyword">clone</span> $objPrototype; </span><br><span class="line"><span class="keyword">echo</span> $objPrototype1-&gt;getID().<span class="string">"&lt;br/&gt;"</span>; </span><br><span class="line">$objPrototype2 = $objPrototype; </span><br><span class="line"><span class="keyword">echo</span> $objPrototype2-&gt;getID().<span class="string">"&lt;br/&gt;"</span>; </span><br><span class="line">$objPrototype3 = $objPrototype-&gt;getClone(); </span><br><span class="line"><span class="keyword">echo</span> $objPrototype3-&gt;getID().<span class="string">"&lt;br/&gt;"</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Visitor 访问者模式</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-visitor%20%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-visitor 访问者模式/</id>
    <published>2018-06-19T13:45:10.002Z</published>
    <updated>2018-06-19T13:46:08.664Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家讲解的是php设计模式 中的Visitor 访问者模式，感兴趣的同学参考下。</p><p>表示一个作用于某对象结构中的各元素的操作,可以在不改变各元素的类的前提下定义作用于这些元素的新操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 访问者模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 表示一个作用于某对象结构中的各元素的操作,可以在不改变各元素的类的前提下定义作用于这些元素的新操作 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitCroncreteElementA</span><span class="params">($element)</span></span>; </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitCroncreteElementB</span><span class="params">($element)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitCroncreteElementA</span><span class="params">($element)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> get_class($element).<span class="string">" visit 1A&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitCroncreteElementB</span><span class="params">($element)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> get_class($element).<span class="string">" visit 1B&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitCroncreteElementA</span><span class="params">($element)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> get_class($element).<span class="string">" visit 2A&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitCroncreteElementB</span><span class="params">($element)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> get_class($element).<span class="string">" visit 2B&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span><span class="params">($visitor)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">extends</span> <span class="title">Element</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span><span class="params">($visitor)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$visitor-&gt;visitCroncreteElementA(<span class="keyword">$this</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">extends</span> <span class="title">Element</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span><span class="params">($visitor)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$visitor-&gt;visitCroncreteElementB(<span class="keyword">$this</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_elements = <span class="keyword">array</span>(); </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span><span class="params">($element)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_elements[] = $element; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span><span class="params">($element)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>($key = array_search($element,<span class="keyword">$this</span>-&gt;_elements) !== <span class="keyword">false</span>) <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_elements[$key]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span><span class="params">($visitor)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;_elements <span class="keyword">as</span> $element) </span><br><span class="line">&#123; </span><br><span class="line">$element-&gt;accept($visitor); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// </span></span><br><span class="line">$objOS = <span class="keyword">new</span> ObjectStructure(); </span><br><span class="line">$objOS-&gt;attach(<span class="keyword">new</span> ConcreteElementA()); </span><br><span class="line">$objOS-&gt;attach(<span class="keyword">new</span> ConcreteElementB()); </span><br><span class="line">$objCV1 = <span class="keyword">new</span> ConcreteVisitor1(); </span><br><span class="line">$objCV2 = <span class="keyword">new</span> ConcreteVisitor2(); </span><br><span class="line">$objOS-&gt;accept($objCV1); </span><br><span class="line">$objOS-&gt;accept($objCV2);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Adapter(适配器模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-adapter(%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-adapter(适配器模式)/</id>
    <published>2018-06-19T13:41:31.132Z</published>
    <updated>2018-06-19T13:43:26.704Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家讲解的是php设计模式 中的Adapter(适配器模式)示例代码，感兴趣的同学参考下。</p><p>将一个类的接口转换成客户希望的另外一个接口,使用原本不兼容的而不能在一起工作的那些类可以在一起工作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 适配器模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 将一个类的接口转换成客户希望的另外一个接口,使用原本不兼容的而不能在一起工作的那些类可以在一起工作 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是原有的类型 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldCache</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"OldCache construct&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">($key,$value)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"OldCache store&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"OldCache remove&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"OldCache fetch&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Cacheable</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($key,$value)</span></span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span><span class="params">($key)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldCacheAdapter</span> <span class="keyword">implements</span> <span class="title">Cacheable</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_cache = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_cache = <span class="keyword">new</span> OldCache(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($key,$value)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_cache-&gt;store($key,$value); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_cache-&gt;fetch($key); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_cache-&gt;remove($key); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$objCache = <span class="keyword">new</span> OldCacheAdapter(); </span><br><span class="line">$objCache-&gt;set(<span class="string">"test"</span>,<span class="number">1</span>); </span><br><span class="line">$objCache-&gt;get(<span class="string">"test"</span>); </span><br><span class="line">$objCache-&gt;del(<span class="string">"test"</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式 Builder(建造者模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-builder(%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-builder(建造者模式)/</id>
    <published>2018-06-19T13:36:32.592Z</published>
    <updated>2018-06-19T13:40:59.240Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家提供的是php设计模式中的 Builder(建造者模式)示例代码，感兴趣的同学参考下。</p><p>将一个复杂对象的构建与它的表示分离,使用同样的构建过程可以创建不同的表示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 建造者模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 将一个复杂对象的构建与它的表示分离,使用同样的构建过程可以创建不同的表示 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> $_type = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> $_size = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> $_color = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setType</span><span class="params">($type)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"set product type&lt;br/&gt;"</span>; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_type = $type; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSize</span><span class="params">($size)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"set product size&lt;br/&gt;"</span>; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_size = $size; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span><span class="params">($color)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"set product color&lt;br/&gt;"</span>; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_color = $color; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$config = <span class="keyword">array</span>( </span><br><span class="line"><span class="string">"type"</span>=&gt;<span class="string">"shirt"</span>, </span><br><span class="line"><span class="string">"size"</span>=&gt;<span class="string">"xl"</span>, </span><br><span class="line"><span class="string">"color"</span>=&gt;<span class="string">"red"</span>, </span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有使用bulider以前的处理 </span></span><br><span class="line">$oProduct = <span class="keyword">new</span> Product(); </span><br><span class="line">$oProduct-&gt;setType($config[<span class="string">'type'</span>]); </span><br><span class="line">$oProduct-&gt;setSize($config[<span class="string">'size'</span>]); </span><br><span class="line">$oProduct-&gt;setColor($config[<span class="string">'color'</span>]); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个builder类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductBuilder</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">$_config = <span class="keyword">null</span>; </span><br><span class="line">$_object = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ProductBuilder</span><span class="params">($config)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_object = <span class="keyword">new</span> Product(); </span><br><span class="line"><span class="keyword">$this</span>-&gt;_config = $config; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"--- in builder---&lt;br/&gt;"</span>; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_object-&gt;setType(<span class="keyword">$this</span>-&gt;_config[<span class="string">'type'</span>]); </span><br><span class="line"><span class="keyword">$this</span>-&gt;_object-&gt;setSize(<span class="keyword">$this</span>-&gt;_config[<span class="string">'size'</span>]); </span><br><span class="line"><span class="keyword">$this</span>-&gt;_object-&gt;setColor(<span class="keyword">$this</span>-&gt;_config[<span class="string">'color'</span>]); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getProduct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_object; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$objBuilder = <span class="keyword">new</span> ProductBuilder($config); </span><br><span class="line">$objBuilder-&gt;build(); </span><br><span class="line">$objProduct = $objBuilder-&gt;getProduct();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式 DAO(数据访问对象模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-dao(%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-dao(数据访问对象模式)/</id>
    <published>2018-06-19T13:33:30.762Z</published>
    <updated>2018-06-19T13:35:42.664Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家提供的是php设计模式 中的DAO(数据访问对象模式)示例代码，感兴趣的同学参考下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 数据访问对象(Data Access Object) 示例 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span>_date: 2010-01-04 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseDAO</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">$_db = <span class="keyword">null</span>; </span><br><span class="line">$_table = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BaseDAO</span><span class="params">($config)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_db = <span class="keyword">new</span> MysqlDB(); <span class="comment">// 这里的不能进行操作 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 获取处理 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array $filter // 过滤条件 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $field // 获取字段 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int $page // 当前页 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> int $limit // 页数 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($filter = array<span class="params">()</span>,$field = <span class="string">"*"</span>,$page = <span class="number">1</span>,$limit = null)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_db-&gt;select($filed)-&gt;from(<span class="keyword">$this</span>-&gt;_table)-&gt;where($filter)-&gt;limit($page,$limit); </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_db-&gt;execute(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span>&#123;&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">()</span></span>&#123;&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">()</span></span>&#123;&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberDAO</span> <span class="keyword">extends</span> <span class="title">BaseDAO</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">$_table = <span class="string">"member"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$oMember = <span class="keyword">new</span> MemberDAO(); </span><br><span class="line">$oMember-&gt;fetch(); </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 常用到的地方: </span></span><br><span class="line"><span class="comment">* MVC中model层基类 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Decorator(装饰模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-decorator(%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-decorator(装饰模式)/</id>
    <published>2018-06-19T13:31:05.085Z</published>
    <updated>2018-06-19T13:33:15.657Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家讲解的是php设计模式中的 Decorator(装饰模式)示例代码，感兴趣的同学参考下</p><p>动态的给一个对象添加一些额外的职责,就扩展功能而言比生成子类方式更为灵活</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 装饰模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 动态的给一个对象添加一些额外的职责,就扩展功能而言比生成子类方式更为灵活 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">header(<span class="string">"Content-type:text/html;charset=utf-8"</span>); </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageBoardHandler</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;&#125; </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($msg)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageBoard</span> <span class="keyword">extends</span> <span class="title">MessageBoardHandler</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($msg)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="string">"处理留言板上的内容|"</span>.$msg; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> MessageBoard(); </span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;filter(<span class="string">"一定要学好装饰模式&lt;br/&gt;"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 以下是使用装饰模式 ---- </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageBoardDecorator</span> <span class="keyword">extends</span> <span class="title">MessageBoardHandler</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_handler = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($handler)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">parent</span>::__construct(); </span><br><span class="line"><span class="keyword">$this</span>-&gt;_handler = $handler; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($msg)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_handler-&gt;filter($msg); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤html </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlFilter</span> <span class="keyword">extends</span> <span class="title">MessageBoardDecorator</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($handler)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">parent</span>::__construct($handler); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($msg)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="string">"过滤掉HTML标签|"</span>.<span class="keyword">parent</span>::filter($msg);; <span class="comment">// 过滤掉HTML标签的处理 这时只是加个文字 没有进行处理 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤敏感词 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensitiveFilter</span> <span class="keyword">extends</span> <span class="title">MessageBoardDecorator</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($handler)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">parent</span>::__construct($handler); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($msg)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="string">"过滤掉敏感词|"</span>.<span class="keyword">parent</span>::filter($msg); <span class="comment">// 过滤掉敏感词的处理 这时只是加个文字 没有进行处理 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> HtmlFilter(<span class="keyword">new</span> SensitiveFilter(<span class="keyword">new</span> MessageBoard())); </span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;filter(<span class="string">"一定要学好装饰模式!&lt;br/&gt;"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Delegation(委托模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-delegation(%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-delegation(委托模式)/</id>
    <published>2018-06-19T13:28:25.463Z</published>
    <updated>2018-06-19T13:39:26.024Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家讲解的是php设计模式中的 Delegation 委托模式示例代码，需要的朋友可以参考下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 委托模式 示例 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span>_date: 2010-01-04 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayList</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">$_songs = <span class="keyword">array</span>(); </span><br><span class="line">$_object = <span class="keyword">null</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PlayList</span><span class="params">($type)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$object = $type.<span class="string">"PlayListDelegation"</span>; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_object = <span class="keyword">new</span> $object(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSong</span><span class="params">($location,$title)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_songs[] = <span class="keyword">array</span>(<span class="string">"location"</span>=&gt;$location,<span class="string">"title"</span>=&gt;$title); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPlayList</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_object-&gt;getPlayList(<span class="keyword">$this</span>-&gt;_songs); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mp3PlayListDelegation</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPlayList</span><span class="params">($songs)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$aResult = <span class="keyword">array</span>(); </span><br><span class="line"><span class="keyword">foreach</span>($songs <span class="keyword">as</span> $key=&gt;$item) </span><br><span class="line">&#123; </span><br><span class="line">$path = pathinfo($item[<span class="string">'location'</span>]); </span><br><span class="line"><span class="keyword">if</span>(strtolower($item[<span class="string">'extension'</span>]) == <span class="string">"mp3"</span>) </span><br><span class="line">&#123; </span><br><span class="line">$aResult[] = $item; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> $aResult; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rmvbPlayListDelegation</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPlayList</span><span class="params">($songs)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$aResult = <span class="keyword">array</span>(); </span><br><span class="line"><span class="keyword">foreach</span>($songs <span class="keyword">as</span> $key=&gt;$item) </span><br><span class="line">&#123; </span><br><span class="line">$path = pathinfo($item[<span class="string">'location'</span>]); </span><br><span class="line"><span class="keyword">if</span>(strtolower($item[<span class="string">'extension'</span>]) == <span class="string">"rmvb"</span>) </span><br><span class="line">&#123; </span><br><span class="line">$aResult[] = $item; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> $aResult; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">$oMP3PlayList = <span class="keyword">new</span> PlayList(<span class="string">"mp3"</span>); </span><br><span class="line">$oMP3PlayList-&gt;getPlayList(); </span><br><span class="line">$oRMVBPlayList = <span class="keyword">new</span> PlayList(<span class="string">"rmvb"</span>); </span><br><span class="line">$oRMVBPlayList-&gt;getPlayList();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Facade(外观模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-facade(%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-facade(外观模式)/</id>
    <published>2018-06-19T13:21:10.893Z</published>
    <updated>2018-06-19T13:27:47.784Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家讲解的是php设计模式 中的Facade(外观模式)示例代码，感兴趣的同学参考下。</p><p>为子系统中的一组接口提供一个一致的界面,定义一个高层接口,使得这一子系统更加的容易使用<br>模式定义：外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。<br>模式结构：</p><p><img src="/img/Facade.png" alt="avatar"></p><p>外观模式的就是让client客户端以一种简单的方式来调用比较复杂的系统，来完成一件事情。</p><p>Subsystem：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">car</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">print_r(<span class="string">"车子启动"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">print_r(<span class="string">"刹车检查正常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">print_r(<span class="string">"检查油箱正常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_console</span><span class="params">()</span> </span>&#123;</span><br><span class="line">print_r(<span class="string">"检查仪表盘是否异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//facade模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">carfacade</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">catgo</span><span class="params">(car $carref)</span></span>&#123;</span><br><span class="line">$carref-&gt;check_stop();</span><br><span class="line">$carref-&gt;check_box();</span><br><span class="line">$carref-&gt;check_console();</span><br><span class="line">$carref-&gt;start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端可以简单的去调用。</span></span><br><span class="line">$car = <span class="keyword">new</span> car();</span><br><span class="line">$carObj = <span class="keyword">new</span> carfacade();</span><br><span class="line">$carObj-&gt;catgo($car);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 外观模式 示例</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 为子系统中的一组接口提供一个一致的界面,定义一个高层接口,使得这一子系统更加的容易使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSytem1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Method1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"subsystem1 method1&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSytem2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Method2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"subsystem2 method2&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSytem3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Method3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"subsystem3 method3&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $_object1 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> $_object2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> $_object3 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_object1 = <span class="keyword">new</span> SubSytem1();</span><br><span class="line"><span class="keyword">$this</span>-&gt;_object2 = <span class="keyword">new</span> SubSytem2();</span><br><span class="line"><span class="keyword">$this</span>-&gt;_object3 = <span class="keyword">new</span> SubSytem3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MethodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Facade MethodA&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_object1-&gt;Method1();</span><br><span class="line"><span class="keyword">$this</span>-&gt;_object2-&gt;Method2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">MethodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Facade MethodB&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_object2-&gt;Method2();</span><br><span class="line"><span class="keyword">$this</span>-&gt;_object3-&gt;Method3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">$objFacade = <span class="keyword">new</span> Facade();</span><br><span class="line"></span><br><span class="line">$objFacade-&gt;MethodA();</span><br><span class="line">$objFacade-&gt;MethodB();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Factory(工厂模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-factory(%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-factory(工厂模式)/</id>
    <published>2018-06-19T13:19:34.677Z</published>
    <updated>2018-06-19T13:20:36.911Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家提供的是php设计模式中的 Factory(工厂模式)示例代码，感兴趣的同学参考下。</p><p>定义一个用于创建对象的接口,让子类决定将哪一个类实例化,使用一个类的实例化延迟到其子类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 工厂方法模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 定义一个用于创建对象的接口,让子类决定将哪一个类实例化,使用一个类的实例化延迟到其子类 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">class DBFactory </span></span><br><span class="line"><span class="comment">&#123; </span></span><br><span class="line"><span class="comment">public static function create($type) </span></span><br><span class="line"><span class="comment">&#123; </span></span><br><span class="line"><span class="comment">swtich($type) </span></span><br><span class="line"><span class="comment">&#123; </span></span><br><span class="line"><span class="comment">case "Mysql": </span></span><br><span class="line"><span class="comment">return new MysqlDB(); break; </span></span><br><span class="line"><span class="comment">case "Postgre": </span></span><br><span class="line"><span class="comment">return new PostgreDB(); break; </span></span><br><span class="line"><span class="comment">case "Mssql": </span></span><br><span class="line"><span class="comment">return new MssqlDB(); break; </span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBFactory</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">($type)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$class = $type.<span class="string">"DB"</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> $class; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DB</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span></span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">()</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlDB</span> <span class="keyword">implements</span> <span class="title">DB</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"mysql db&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostgreDB</span> <span class="keyword">implements</span> <span class="title">DB</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Postgre db&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MssqlDB</span> <span class="keyword">implements</span> <span class="title">DB</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"mssql db&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$oMysql = DBFactory::create(<span class="string">"Mysql"</span>); </span><br><span class="line">$oPostgre = DBFactory::create(<span class="string">"Postgre"</span>); </span><br><span class="line">$oMssql = DBFactory::create(<span class="string">"Mssql"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Interpreter(解释器模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-interpreter(%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-interpreter(解释器模式)/</id>
    <published>2018-06-19T13:16:51.079Z</published>
    <updated>2018-06-19T13:18:25.591Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家讲解的是php设计模式 中的Interpreter(解释器模式)示例代码，感兴趣的同学参考下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 解释器 示例 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span>_date: 2010-01-04 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expression</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interpreter</span><span class="params">($str)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> $str; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpressionNum</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interpreter</span><span class="params">($str)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">switch</span>($str) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"0"</span>: <span class="keyword">return</span> <span class="string">"零"</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"1"</span>: <span class="keyword">return</span> <span class="string">"一"</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"2"</span>: <span class="keyword">return</span> <span class="string">"二"</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"3"</span>: <span class="keyword">return</span> <span class="string">"三"</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"4"</span>: <span class="keyword">return</span> <span class="string">"四"</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"5"</span>: <span class="keyword">return</span> <span class="string">"五"</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"6"</span>: <span class="keyword">return</span> <span class="string">"六"</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"7"</span>: <span class="keyword">return</span> <span class="string">"七"</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"8"</span>: <span class="keyword">return</span> <span class="string">"八"</span>; </span><br><span class="line"><span class="keyword">case</span> <span class="string">"9"</span>: <span class="keyword">return</span> <span class="string">"九"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpressionCharater</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interpreter</span><span class="params">($str)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> strtoupper($str); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interpreter</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">($string)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$expression = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;$i&lt;strlen($string);$i++) &#123; </span><br><span class="line">$temp = $string[$i]; </span><br><span class="line"><span class="keyword">switch</span>(<span class="keyword">true</span>) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">case</span> is_numeric($temp): $expression = <span class="keyword">new</span> ExpressionNum(); <span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">default</span>: $expression = <span class="keyword">new</span> ExpressionCharater(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> $expression-&gt;interpreter($temp); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">$obj = <span class="keyword">new</span> Interpreter(); </span><br><span class="line">$obj-&gt;execute(<span class="string">"12345abc"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式 Strategy(策略模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-strategy(%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-strategy(策略模式)/</id>
    <published>2018-06-19T13:12:30.548Z</published>
    <updated>2018-06-19T13:15:08.791Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家提供的是php设计模式中的 Strategy(策略模式)示例代码，感兴趣的同学参考下。</p><p>定义一系列算法,把它们一个个封装起来,并且使它们可相互替换,使用得算法的变化可独立于使用它的客户</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 策略模式(Strategy.php) </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 定义一系列算法,把它们一个个封装起来,并且使它们可相互替换,使用得算法的变化可独立于使用它的客户 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// ---以下是一系列算法的封闭---- </span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CacheTable</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($key,$value)</span></span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span><span class="params">($key)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用缓存 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoCache</span> <span class="keyword">implements</span> <span class="title">CacheTable</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Use NoCache&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($key,$value)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件缓存 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileCache</span> <span class="keyword">implements</span> <span class="title">CacheTable</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Use FileCache&lt;br/&gt;"</span>; </span><br><span class="line"><span class="comment">// 文件缓存构造函数 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// 文件缓存的get方法实现 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($key,$value)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// 文件缓存的set方法实现 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// 文件缓存的del方法实现 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// TTServer </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TTCache</span> <span class="keyword">implements</span> <span class="title">CacheTable</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Use TTCache&lt;br/&gt;"</span>; </span><br><span class="line"><span class="comment">// TTServer缓存构造函数 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// TTServer缓存的get方法实现 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($key,$value)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// TTServer缓存的set方法实现 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// TTServer缓存的del方法实现 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 以下是使用不用缓存的策略 ------ </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_cache; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_cache = <span class="keyword">new</span> NoCache(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCache</span><span class="params">($cache)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_cache = $cache; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">Model</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PorductModel</span> <span class="keyword">extends</span> <span class="title">Model</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_cache = <span class="keyword">new</span> TTCache(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 实例一下 --- </span></span><br><span class="line">$mdlUser = <span class="keyword">new</span> UserModel(); </span><br><span class="line">$mdlProduct = <span class="keyword">new</span> PorductModel(); </span><br><span class="line">$mdlProduct-&gt;setCache(<span class="keyword">new</span> FileCache()); <span class="comment">// 改变缓存策略</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Observer(观察者模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-observer(%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-observer(观察者模式)/</id>
    <published>2018-06-19T13:10:23.076Z</published>
    <updated>2018-06-19T13:12:13.393Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家介绍的是php设计模式 中的Observer(观察者模式)，感兴趣的同学参考下。</p><p>定义对象间的一种一对多的依赖关系,以便当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并自动刷新 能够便利地创建查看目标对象状态的对象,并且提供与核心对象非耦合的指定功能</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 观察者模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 定义对象间的一种一对多的依赖关系,以便当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并自动刷新 </span></span><br><span class="line"><span class="comment">* 能够便利地创建查看目标对象状态的对象,并且提供与核心对象非耦合的指定功能 </span></span><br><span class="line"><span class="comment">* 插件系统 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observerable</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_observers = <span class="keyword">array</span>(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerObserver</span><span class="params">($observer)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_observers[] = $observer; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeObserver</span><span class="params">($observer)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$key = array_search($observer,<span class="keyword">$this</span>-&gt;_observers); </span><br><span class="line"><span class="keyword">if</span>(!($key === <span class="keyword">false</span>)) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_observers[$key]); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notifyObservers</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;_observers <span class="keyword">as</span> $observer) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>($observer <span class="keyword">instanceof</span> Observer) $observer-&gt;update(<span class="keyword">$this</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($observer)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 实例类定义 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsObserverable</span> <span class="keyword">extends</span> <span class="title">Observerable</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_sports_news; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSportsNews</span><span class="params">($data)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_sports_news = $data; </span><br><span class="line"><span class="keyword">$this</span>-&gt;notifyObservers(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSportsNews</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_sports_news; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> $_local_news; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLocalNews</span><span class="params">($data)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_local_news = $data; </span><br><span class="line"><span class="keyword">$this</span>-&gt;notifyObservers(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLocalNews</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_local_news; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SportsNews</span> <span class="keyword">implements</span> <span class="title">Observer</span>,<span class="title">DisplayElement</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_data = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($observer)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;_data != $observer-&gt;getSportsNews()) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_data = $observer-&gt;getSportsNews(); </span><br><span class="line"><span class="keyword">$this</span>-&gt;display(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_data.date(<span class="string">"Y-m-d H:i:s"</span>).<span class="string">"&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalNews</span> <span class="keyword">implements</span> <span class="title">Observer</span>,<span class="title">DisplayElement</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_data = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($observer)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;_data != $observer-&gt;getLocalNews()) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_data = $observer-&gt;getLocalNews(); </span><br><span class="line"><span class="keyword">$this</span>-&gt;display(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_data.date(<span class="string">"Y-m-d H:i:s"</span>).<span class="string">"&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 实例化 --- </span></span><br><span class="line"></span><br><span class="line">$objObserver = <span class="keyword">new</span> NewsObserverable(); </span><br><span class="line">$local = <span class="keyword">new</span> LocalNews(); </span><br><span class="line">$sports = <span class="keyword">new</span> SportsNews(); </span><br><span class="line"></span><br><span class="line">$objObserver-&gt;registerObserver($local); </span><br><span class="line">$objObserver-&gt;registerObserver($sports); </span><br><span class="line"></span><br><span class="line">$objObserver-&gt;setSportsNews(<span class="string">"sports news 1 "</span>); </span><br><span class="line">$objObserver-&gt;setLocalNews(<span class="string">"local news 1 "</span>); </span><br><span class="line">$objObserver-&gt;removeObserver($sports); </span><br><span class="line">$objObserver-&gt;setLocalNews(<span class="string">"local news 2 "</span>); </span><br><span class="line">$objObserver-&gt;setSportsNews(<span class="string">"sports news 2 "</span>); </span><br><span class="line">$objObserver-&gt;removeObserver($local); </span><br><span class="line">$objObserver-&gt;setLocalNews(<span class="string">"local news 3 "</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Singleton(单例模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-singleton(%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-singleton(单例模式)/</id>
    <published>2018-06-19T13:06:16.336Z</published>
    <updated>2018-06-19T13:07:37.382Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家提供的是php设计模式 中的Singleton(单例模式)示例代码，感兴趣的同学参考下。</p><p>保证一个类仅有一个实例,并提供一个访问它的全局访问点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 单例模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 保证一个类仅有一个实例,并提供一个访问它的全局访问点 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">private</span> $_instance = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(is_null(<span class="keyword">self</span>::$_instance)) &#123; </span><br><span class="line"><span class="keyword">self</span>::$_instance = <span class="keyword">new</span> Singleton(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>::$_instance; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"it is a singlton class function"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// $obj = new Singleton(); // 声明不能成功 </span></span><br><span class="line">$obj = Singleton::getInstance(); </span><br><span class="line">var_dump($obj); </span><br><span class="line">$obj-&gt;display(); </span><br><span class="line"></span><br><span class="line">$obj1 = Singleton::getInstance(); </span><br><span class="line">var_dump(($obj === $obj1));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Command(命令模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-command(%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-command(命令模式)/</id>
    <published>2018-06-19T13:01:00.581Z</published>
    <updated>2018-06-19T13:04:40.959Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家介绍的是php设计模式 中的Command(命令模式)示例代码，感兴趣的同学参考下。</p><p>将一个请求封装为一个对象从而使你可用不同的请求对客户进行参数化,对请求排除或记录请求日志,以及支持可取消的操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 命令模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 将一个请求封装为一个对象从而使你可用不同的请求对客户进行参数化,对请求排除或记录请求日志,以及支持可取消的操作 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_command = <span class="keyword">array</span>(); </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setCommand</span><span class="params">($command)</span> </span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_command[] = $command; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">executeCommand</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;_command <span class="keyword">as</span> $command) </span><br><span class="line">&#123; </span><br><span class="line">$command-&gt;execute(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeCommand</span><span class="params">($command)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">$key = array_search($command, <span class="keyword">$this</span>-&gt;_command); </span><br><span class="line"><span class="keyword">if</span>($key !== <span class="keyword">false</span>) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_command[$key]); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_name = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span> </span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_name = $name; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_name.<span class="string">" action&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action1</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_name.<span class="string">" action1&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_receiver; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($receiver)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_receiver = $receiver; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_receiver-&gt;action(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand1</span> <span class="keyword">implements</span> <span class="title">Command</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_receiver; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($receiver)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_receiver = $receiver; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_receiver-&gt;action1(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand2</span> <span class="keyword">implements</span> <span class="title">Command</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_receiver; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($receiver)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_receiver = $receiver; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_receiver-&gt;action(); </span><br><span class="line"><span class="keyword">$this</span>-&gt;_receiver-&gt;action1(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$objRecevier = <span class="keyword">new</span> Receiver(<span class="string">"No.1"</span>); </span><br><span class="line">$objRecevier1 = <span class="keyword">new</span> Receiver(<span class="string">"No.2"</span>); </span><br><span class="line">$objRecevier2 = <span class="keyword">new</span> Receiver(<span class="string">"No.3"</span>); </span><br><span class="line"></span><br><span class="line">$objCommand = <span class="keyword">new</span> ConcreteCommand($objRecevier); </span><br><span class="line">$objCommand1 = <span class="keyword">new</span> ConcreteCommand1($objRecevier); </span><br><span class="line">$objCommand2 = <span class="keyword">new</span> ConcreteCommand($objRecevier1); </span><br><span class="line">$objCommand3 = <span class="keyword">new</span> ConcreteCommand1($objRecevier1); </span><br><span class="line">$objCommand4 = <span class="keyword">new</span> ConcreteCommand2($objRecevier2); <span class="comment">// 使用 Recevier的两个方法 </span></span><br><span class="line"></span><br><span class="line">$objInvoker = <span class="keyword">new</span> Invoker(); </span><br><span class="line">$objInvoker-&gt;setCommand($objCommand); </span><br><span class="line">$objInvoker-&gt;setCommand($objCommand1); </span><br><span class="line">$objInvoker-&gt;executeCommand(); </span><br><span class="line">$objInvoker-&gt;removeCommand($objCommand1); </span><br><span class="line">$objInvoker-&gt;executeCommand(); </span><br><span class="line"></span><br><span class="line">$objInvoker-&gt;setCommand($objCommand2); </span><br><span class="line">$objInvoker-&gt;setCommand($objCommand3); </span><br><span class="line">$objInvoker-&gt;setCommand($objCommand4); </span><br><span class="line">$objInvoker-&gt;executeCommand();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Template(模板模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-template(%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-template(模板模式)/</id>
    <published>2018-06-19T12:56:50.050Z</published>
    <updated>2018-06-19T12:59:43.093Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家介绍的是php设计模式中的 Template (模板模式)示例代码，感兴趣的同学参考下。</p><p>定义一个操作中的算法骨架,而将一些步骤延迟到子类中,使得子类可以不改变一个算法的结构可以定义该算法的某些特定步骤<br>继承关系由于自身的缺陷，被专家们扣上了“罪恶”的帽子。“使用委派关系代替继承关系”，“尽量使用接口实现而不是抽象类继承”等等专家警告，让我们这些菜鸟对继承“另眼相看”。其实，继承还是有很多自身的优点所在。只是被大家滥用的似乎缺点更加明显了。合理的利用继承关系，还是能对你的系统设计起到很好的作用的。而模板方法模式就是其中的一个使用范例。</p><p>GOF给模板方法（Template Method）模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。这里的算法的结构，可以理解为你根据需求设计出来的业务流程。特定的步骤就是指那些可能在内容上存在变数的环节。</p><p>可以看出来，模板方法模式也是为了巧妙解决变化对系统带来的影响而设计的。使用模板方法使系统扩展性增强，最小化了变化对系统的影响。这一点，在下面的举例中可以很明显的看出来。</p><p>先看一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 模板模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 定义一个操作中的算法骨架,而将一些步骤延迟到子类中,使得子类可以不改变一个算法的结构可以定义该算法的某些特定步骤 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateBase</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Method1</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"abstract Method1&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Method2</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"abstract Method2&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Method3</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"abstract Method3&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;Method1(); </span><br><span class="line"><span class="keyword">$this</span>-&gt;Method2(); </span><br><span class="line"><span class="keyword">$this</span>-&gt;Method3(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateObject</span> <span class="keyword">extends</span> <span class="title">TemplateBase</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateObject1</span> <span class="keyword">extends</span> <span class="title">TemplateBase</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Method3</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"TemplateObject1 Method3&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateObject2</span> <span class="keyword">extends</span> <span class="title">TemplateBase</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Method2</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"TemplateObject2 Method2&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化 </span></span><br><span class="line">$objTemplate = <span class="keyword">new</span> TemplateObject(); </span><br><span class="line">$objTemplate1 = <span class="keyword">new</span> TemplateObject1(); </span><br><span class="line">$objTemplate2 = <span class="keyword">new</span> TemplateObject2(); </span><br><span class="line"></span><br><span class="line">$objTemplate-&gt;doSomeThing(); </span><br><span class="line">$objTemplate1-&gt;doSomeThing(); </span><br><span class="line">$objTemplate2-&gt;doSomeThing();</span><br></pre></td></tr></table></figure><p>AbstractClass（抽象类）：定义了一到多个的抽象方法，以供具体的子类来实现它们；而且还要实现一个模板方法，来定义一个算法的骨架。该模板方法不仅调用前面的抽象方法，也可以调用其他的操作，只要能完成自身的使命。</p><p>ConcreteClass（具体类）：实现父类中的抽象方法以完成算法中与特定子类相关的步骤。</p><p>根据上面对定义的分析，以及例子的说明，可以看出模板方法适用于以下情况：</p><p>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。<br>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。其实这可以说是一种好的编码习惯了。<br>控制子类扩展。模板方法只在特定点调用操作，这样就只允许在这些点进行扩展。比如上面runBare（）方法就只在runTest前面适用setUp方法。如果你不愿子类来修改你的模板方法定义的框架，你可以采用两种方式来做：一是在API中不体现出你的模板方法；二、将你的模板方法置为final就可以了。<br>可以看出，使用模板方法模式可以将代码的公共行为提取出来，达到复用的目的。而且，在模板方法模式中，是由父类的模板方法来控制子类中的具体实现。这样你在实现子类的时候，根本不需要对业务流程有太多的了解。</p>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式-Proxy (代理模式)</title>
    <link href="http://blog.wddog.cn/2018/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-proxy%20(%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.wddog.cn/2018/06/19/设计模式-proxy (代理模式)/</id>
    <published>2018-06-19T12:51:37.998Z</published>
    <updated>2018-06-19T12:55:05.521Z</updated>
    
    <content type="html"><![CDATA[<p>本文为大家介绍的是php设计模式 中的Proxy (代理模式)示例代码，感兴趣的同学参考学习下。</p><p>为其他对象提供一个代理以控制这个对象的访问<br>代理，指的就是一个角色代表另一个角色采取行动，就象生活中，一个红酒厂商，是不会直接把红酒零售客户的，都是通过代理来完成他的销售业务。而客户，也不用为了喝红酒而到处找工厂，他只要找到厂商在当地的代理就行了，具体红酒工厂在那里，客户不用关心，代理会帮他处理。</p><p>代理模式，就是给某一对象提供代理对象，并由代理对象控制具体对象的引用。</p><p>代理模式涉及的角色：</p><p>抽象主题角色，声明了代理主题和真实主题的公共接口，使任何需要真实主题的地方都能用代理主题代替。<br>代理主题角色，含有真实主题的引用，从而可以在任何时候操作真实主题，代理主题功过提供和真实主题相同的接口，使它可以随时代替真实主题。代理主题通过持有真实主题的引用，不但可以控制真实主题的创建或删除，可以在真实主题被调用前进行拦截，或在调用后进行某些操作。<br>真实代理对象，定义了代理角色所代表的具体对象。<br>参考一下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 代理模式 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 为其他对象提供一个代理以控制这个对象的访问 </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Proxy</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">()</span></span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"RealSubject request&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"RealSubject display&lt;br/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxySubject</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">private</span> $_subject = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_subject = <span class="keyword">new</span> RealSubject(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_subject-&gt;request(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">$this</span>-&gt;_subject-&gt;display(); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$objProxy = <span class="keyword">new</span> ProxySubject(); </span><br><span class="line">$objProxy-&gt;request(); </span><br><span class="line">$objProxy-&gt;display();</span><br></pre></td></tr></table></figure><p>代理模式的工作方式：首先，因为代理主题和真实主题都实现了共同的接口，这使我们可以在不改变原来接口的情况下，只要用真实主题对象的地方，都可以用代理主题来代替。其次，代理主题在客户和真实主题之间起了一个中介作用，利用这个中介平台，我们可以在把客户请求传递给真实主题之前做一些必要的预处理。</p><p>还有一个很常见的代理模式的使用例子就是对大幅图片浏览的控制。在我们常见的网站上面浏览图文的信息时，不知道你有没有注意到，图片位置放置的是经过缩小的，当有人要仔细的查看这个图片时，可以通过点击图片来激活一个链接，在一个新的网页打开要看的图片 。这样对于提高浏览速度是很有好处的，因为不是每个人都要去看仔细图上的信息。这种情况就可以使用代理模式来全面实现。这里我将思路表述出来，至于实现由于工作原因，就不表述了，至于这种方式在B/S模式下的真实可行性，我没有确认过，只是凭空的想象。如果不是可行的方式，那这个例子可以放到一个C/S下来实现，这个是绝对没有问题的，而且在很多介绍设计模式的书和文章中使用。两种方式的实现有兴趣的可以来尝试一下：）</p><p>我们在浏览器中访问网页时是调用的不是真实的装载图片的方法，而是在代理对象中的方法，在这个对象中，先使用一个线程向浏览器装载了一个缩小版的图片，而在后台使用另一个线程来调用真实的装载大图片的方法将图片加载到本地，当你要浏览这个图片的时候，将其在新的网页中显示出来。当然如果在你想浏览的时候图片尚未加载成功，可以再启动一个线程来显示提示信息，直到加载成功。</p><p>这样代理模式的功能就在上面体现的淋漓尽致——通过代理来将真实图片的加载放到后台来操作，使其不影响前台的浏览。</p><p>代理模式能够协调调用者和被调用者，能够在一定程度上降低系统的耦合度。不过一定要记住前面讲的使用代理模式的条件，不然的话使用了代理模式不但不会有好的效果，说不定还会出问题的。</p>]]></content>
    
    <summary type="html">
    
      simple
    
    </summary>
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/categories/Design-Patterns/"/>
    
    
      <category term="Design Patterns" scheme="http://blog.wddog.cn/tags/Design-Patterns/"/>
    
  </entry>
  
</feed>
