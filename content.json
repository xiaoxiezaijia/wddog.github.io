{"meta":{"title":"帅气的狗头","subtitle":null,"description":"我们敲代码的不懂这些，，，","author":"xiaoxie","url":"http://blog.wddog.cn"},"pages":[{"title":"tags","date":"2018-03-06T03:47:23.000Z","updated":"2018-03-06T03:48:26.655Z","comments":false,"path":"tags/index.html","permalink":"http://blog.wddog.cn/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-03-06T03:49:36.000Z","updated":"2018-03-06T03:49:58.542Z","comments":false,"path":"categories/index.html","permalink":"http://blog.wddog.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"php 生成唯一订单的 6 种方法","slug":"PHP生成唯一订单的 6 种方法","date":"2018-03-09T15:09:06.266Z","updated":"2018-03-09T15:16:57.112Z","comments":true,"path":"2018/03/09/PHP生成唯一订单的 6 种方法/","link":"","permalink":"http://blog.wddog.cn/2018/03/09/PHP生成唯一订单的 6 种方法/","excerpt":"","text":"PHP生成唯一订单号其实是非常的简单了我们随便就可以整理多种生成方式了，这里小编整理了6种方式供各位参考。 做商城类项目经常需要生成唯一订单号，下面来个汇总！ 方法一:1return date('Ymd') . str_pad(mt_rand(1, 99999), 5, '0', STR_PAD_LEFT); 方法二:1234567891011121314151617/** * * uniqid - 官方是这样说的： * Gets a prefixed unique identifier based on the current time in microseconds. */ function build_order_no() &#123; return date('Ymd').&lt;a href=\"/tags.php/substr/\" target=\"_blank\"&gt;substr&lt;/a&gt;(implode(NULL, array_map('ord', str_split(substr(uniqid(), 7, 13), 1))), 0, 8); &#125; 用uniqid获取一个基于当前的微秒数生成的唯一不重复的字符串（但是他的前7位貌似很久才会发生变动，所以不用考虑可删除），取其第8到13位。但是这个字符串里面有英文字母，咋办？ 用ord获取他的ASCII码，所以就有了下一步：用str_split把这个字符串分割为数组，用array_map去操作（速度快点）。 然后返回的还是一个数组，KO，在用implode弄成字符串，但是字符长度不定，取前固定的几位，然后前面加上当前的年份和日期，这个方法生成的订单号，全世界不会有多少重复的。 当然，除非你把服务器时间往前调，但是调也不用怕，哥不相信他会在同一微秒内下两次订单，网络数据传输也要点时间的，即便你是在本地。 方法三:12345678910111213public function make_order($user_id) &#123; return mt_rand(10,99) . sprintf('%010d',time() - 946656000) . sprintf('%03d', (float) microtime() * 1000) . sprintf('%03d', (int) $user_id % 1000); &#125; 方法四: 我是比较喜欢这种方式的(O(∩_∩)O哈哈~)1234$yCode = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'); $orderSn = $yCode[intval(date('Y')) - 2011] . strtoupper(dechex(date('m'))) . date('d') . substr(time(), -5) . substr(microtime(), 2, 5) . sprintf('%02d', rand(0, 99 )); 方法五 生成24位唯一订单号码:123456789101112131415161718192021//生成24位唯一订单号码，格式：YYYY-MMDD-HHII-SS-NNNN,NNNN-CC，其中：YYYY=年份，MM=月份，DD=日期，HH=24格式小时，II=分，SS=秒，NNNNNNNN=随机数，CC=检查码 @date_default_timezone_set(\"PRC\"); while(true)&#123; //订购日期 $order_date = date('Y-m-d'); //订单号码主体（YYYYMMDDHHIISSNNNNNNNN） $order_id_main = date('YmdHis') . rand(10000000,99999999); //订单号码主体长度 $order_id_len = strlen($order_id_main); $order_id_sum = 0; for($i=0; $i&lt;$order_id_len; $i++)&#123; $order_id_sum += (int)(substr($order_id_main,$i,1)); &#125; //唯一订单号码（YYYYMMDDHHIISSNNNNNNNNCC） $order_id = $order_id_main . str_pad((100 - $order_id_sum % 100) % 100,2,'0',STR_PAD_LEFT); if($result = sqlite_query($db,\"SELECT * FROM orders WHERE order_id='$order_id'\"))&#123; if(sqlite_num_rows($result) == 0)&#123; break; &#125; &#125; 例子六:12345678910111213141516171819/** * 生成16位纯数字订单号 * 最大支持时间到 2056-12-31 23:59:59 * * @access public * @return string //phpfensi.com */ public static function getOrderSN() &#123; return (date('y') + date('m') + date('d')) . str_pad((time() - &lt;a href=\"/tags.php/strtotime/\" target=\"_blank\"&gt;strtotime&lt;/a&gt;(date('Y-m-d'))), 5, 0, STR_PAD_LEFT) . substr(microtime(), 2, 6) . sprintf('%03d', rand(0, 999)); &#125; 目前在用的,基本保证不重复了,能用到2056年,觉得应该够了,以后有需求再扩展.","categories":[{"name":"PHP","slug":"PHP","permalink":"http://blog.wddog.cn/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://blog.wddog.cn/tags/PHP/"}]},{"title":"Mysql 忘记密码解决与用户创建，授权详解","slug":"Mysql小技巧","date":"2018-03-09T10:54:48.450Z","updated":"2018-03-09T12:47:29.576Z","comments":true,"path":"2018/03/09/Mysql小技巧/","link":"","permalink":"http://blog.wddog.cn/2018/03/09/Mysql小技巧/","excerpt":"","text":"当你忘记 Mysql 密码时，又能操作 服务器 (Linux) 时 就能很简单的重设密码，下面就和我一起学习吧！ 一、Mysql 绕过密码登录1. KILL掉系统里的MySQL进程；2. 用以下命令启动MySQL，以不检查权限的方式启动；1mysqld_safe --skip-grant-tables &amp; 3. 然后用空密码方式使用root用户登录 MySQL；1mysql -u root 4. 修改 root 用户密码123mysql&gt; update mysql.user set password=PASSWORD（&apos;123456&apos;） where User=root and host=&apos;localhost&apos;；mysql&gt; flush privileges； // 把配置写入内存 生效mysql&gt; quit 5. 重新启动MySQL，就可以使用新密码登录了。1mysql -u root -p123456 二、MySQL添加新用户、为用户创建数据库、为新用户分配权限登录MySQL12mysql -u root -p 添加新用户允许本地 IP 访问 localhost, 127.0.0.1 1create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;; 允许外网 IP 访问1create user &apos;test&apos;@&apos;%&apos; identified by &apos;123456&apos;; 刷新授权1flush privileges; 为用户创建数据库1create database test DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 为新用户分配权限授予用户通过外网IP对于该数据库的全部权限1grant all privileges on `testdb`.* to &apos;test&apos;@&apos;%&apos; identified by &apos;123456&apos;; 授予用户在本地服务器对该数据库的全部权限1grant all privileges on `testdb`.* to &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;; 刷新权限1flush privileges; 退出 root 重新登录1exit 用新帐号 test 重新登录，由于使用的是 % 任意IP连接，所以需要指定外部访问IP1mysql -u test -h 115.28.203.224 -p 在Ubuntu服务器下，MySQL默认是只允许本地登录，因此需要修改配置文件将地址绑定给注释掉： 123# Instead of skip-networking the default is now to listen only on # localhost which is more compatible and is not less secure. #bind-address = 127.0.0.1 #注释掉这一行就可以远程登录了 不然会报如下错误： ERROR 2003 (HY000): Can’t connect to MySQL server on ‘host’ (111)","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://blog.wddog.cn/categories/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://blog.wddog.cn/tags/Mysql/"},{"name":"PHP","slug":"PHP","permalink":"http://blog.wddog.cn/tags/PHP/"}]},{"title":"又重新搭建了一个博客，此次使用 Hexo + Github 搭建","slug":"前言","date":"2018-03-05T10:42:08.835Z","updated":"2018-03-06T03:32:31.908Z","comments":true,"path":"2018/03/05/前言/","link":"","permalink":"http://blog.wddog.cn/2018/03/05/前言/","excerpt":"","text":"使用 Hexo 搭建个人博客还是很简单的，极其轻松，使用也简单，最好的是你甚至不需要 域名，也不需要服务器，在 Github上注册一个账号，你就能很快的搭建一个好看又好用的博客了，这对学生党而言就是福音了，毕竟穷(我也一脸穷苦相，妈耶！) 前言Hexo 的文章格式也极其简单，使用的 Markdown 标记语言,你只需要记住几个简单的标记，就能满足日常使用的。。。(不像 HTML 那一堆的标记，简直记得头大)接下来就告诉你一些 简单 Markdown 快 get 到自己的 Blog 吧 一、标题123456# 一级标题## 二级标题### 三级标题##### 四级标题###### 五级标题###### 六级标题 效果如下：一级标题二级标题三级标题四级标题五级标题六级标题二、列表Markdown 支持有序列表和无序列表。 无序列表使用-、+和*作为列表标记：1234567891011- Red- Green- Blue* Red* Green* Blue+ Red+ Green+ Blue 效果如下： Red Green Blue 有序列表则使用数字加英文句点.来表示：1231. Red2. Green3. Blue 效果如下： Red Green Blue 三、引用引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。 常见的引用写法： 12345678910111213141516171819&gt; 这是一段引用 //在`&gt;`后面有 1 个空格&gt; &gt; 这是引用的代码块形式 //在`&gt;`后面有 5 个空格&gt; &gt; 代码例子：&gt; protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125;&gt; 一级引用&gt; &gt; 二级引用&gt; &gt; &gt; 三级引用&gt; #### 这是一个四级标题&gt; &gt; 1. 这是第一行列表项&gt; 2. 这是第二行列表项 效果如下： 这是一段引用 //在&gt;后面有 1 个空格 这是引用的代码块形式 //在`&gt;`后面有 5 个空格 代码例子： protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } 一级引用 二级引用 三级引用 这是一个四级标题 这是第一行列表项 这是第二行列表项 四、强调两个或-代表加粗，一个或-代表斜体，~~代表删除。 12345**加粗文本** 或者 __加粗文本__*斜体文本* 或者_斜体文本_~~删除文本~~ 效果如下：加粗文本 或者 加粗文本 斜体文本 或者斜体文本 删除文本 五、图片与链接图片与链接的语法很像，区别在一个 ! 号。二者格式： 123图片：![]() ![图片文本(可忽略)](图片地址)链接：[]() [链接文本](链接地址) 链接又分为行内式、参考式和 自动链接： 12345678910111213这是行内式链接：[ConnorLin&apos;s Blog](http://connorlin.github.io)。这是参考式链接：[ConnorLin&apos;s Blog][url]，其中url为链接标记，可置于文中任意位置。[url]: http://connorlin.github.io/ &quot;ConnorLin&apos;s Blog&quot;链接标记格式为：[链接标记文本]: 链接地址 链接title(可忽略)这是自动链接：直接使用`&lt;&gt;`括起来&lt;http://connorlin.github.io&gt;这是图片：![][avatar][avatar]: https://connorlin.github.io/images/avatar.jpg 效果如下：这是行内式链接：ConnorLin’s Blog。 这是参考式链接：ConnorLin’s Blog，其中url为链接标记，可置于文中任意位置。 链接标记格式为：[链接标记文本]: 链接地址 链接title(可忽略) 这是自动链接：直接使用&lt;&gt;括起来http://connorlin.github.io 这是图片： 六、代码代码分为行内代码和代码块。 行内代码使用 代码 标识，可嵌入文字中 代码块使用4个空格或12 这里是代码123456代码语法高亮在 ```后面加上空格和语言名称即可``` 语言//注意语言前面有空格这里是代码 例如： 12345678910这是行内代码`onCreate(Bundle savedInstanceState)`的例子。这是代码块和语法高亮：``` java// 注意java前面有空格protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);&#125; 效果如下：这是行内代码onCreate(Bundle savedInstanceState)的例子。 这是代码块和语法高亮： 1234if(true)&#123; echo \"我真是一个又帅又令人发情的 Boy\";&#125; 七、表格表格对齐格式 居左：:—- 居中：:—-:或—– 居右：—-: 例子： 123456|标题|标题|标题||:---|:---:|---:||居左测试文本|居中测试文本|居右测试文本||居左测试文本1|居中测试文本2|居右测试文本3||居左测试文本11|居中测试文本22|居右测试文本33||居左测试文本111|居中测试文本222|居右测试文本333| 效果如下： 标题 标题 标题 居左测试文本 居中测试文本 居右测试文本 居左测试文本1 居中测试文本2 居右测试文本3 居左测试文本11 居中测试文本22 居右测试文本33 居左测试文本111 居中测试文本222 居右测试文本333 八、分割线在一行中用三个以上的*、-、_来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。 12345***---___* * * 效果均为一条分割线： 九、换行在行尾添加两个空格加回车表示换行： 1这是一行后面加两个空格 换行 效果如下：这是一行后面加两个空格换行 十、脚注(注解)使用[^]来定义脚注： 123这是一个脚注的例子[^1][^1]: 这里是脚注 效果如下：这是一个脚注的例子[^1] 扩展：常用弥补Markdown的Html标签字体12&lt;font face=&quot;微软雅黑&quot; color=&quot;red&quot; size=&quot;6&quot;&gt;字体及字体颜色和大小&lt;/font&gt;&lt;font color=&quot;#0000ff&quot;&gt;字体颜色&lt;/font&gt; 效果如下：字体及字体颜色和大小字体颜色 换行 1使用html标签`&lt;br/&gt;`&lt;br/&gt;换行 效果如下：使用html标签换行 文本对齐方式 123&lt;p align=&quot;left&quot;&gt;居左文本&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;居中文本&lt;/p&gt;&lt;p align=&quot;right&quot;&gt;居右文本&lt;/p&gt; 效果如下：居左文本居中文本居右文本 下划线 1&lt;u&gt;下划线文本&lt;/u&gt; 效果如下：下划线文本 That’s all, Enjoy it!","categories":[{"name":"Hexo教程","slug":"Hexo教程","permalink":"http://blog.wddog.cn/categories/Hexo教程/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.wddog.cn/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"http://blog.wddog.cn/tags/Github/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-03-05T10:22:21.768Z","updated":"2018-03-05T10:22:21.768Z","comments":true,"path":"2018/03/05/hello-world/","link":"","permalink":"http://blog.wddog.cn/2018/03/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}